Write your observations on the folloing:
1) Typeof:
    The typeof operator returns the type of a variable or an expression:
    typeof ""             // Returns "string"
    typeof "John"         // Returns "string"
    typeof "John Doe"     // Returns "string"

2)instanceof:
    The instanceof operator in JavaScript is used to check the type of an object at run time. It returns a boolean value if true then it indicates that the object is an instance of a particular class and if false then it is not.

3)arithmetic operators:
    Operator	Description
    +	Addition
    -	Subtraction
    *	Multiplication
    **	Exponentiation (ES2016)
    /	Division
    %	Modulus (Remainder)
    ++	Increment
    --	Decrement

4)relational operators:
    && (Logical AND)
    If both the operands are non-zero, then the condition becomes true.
    Ex: (A && B) is true.

    	
    || (Logical OR)
    If any of the two operands are non-zero, then the condition becomes true.
    Ex: (A || B) is true.

    	
    ! (Logical NOT)
    Reverses the logical state of its operand. If a condition is true, then the Logical NOT operator will make it false.
    Ex: ! (A && B) is false.
    
5)bitwise operators:
    & (Bitwise AND)

    It performs a Boolean AND operation on each bit of its integer arguments.

    Ex: (A & B) is 2.

        
    | (BitWise OR)
    It performs a Boolean OR operation on each bit of its integer arguments.
    Ex: (A | B) is 3.

        
    ^ (Bitwise XOR)
    It performs a Boolean exclusive OR operation on each bit of its integer arguments. Exclusive OR means that either operand one is true or operand two is true, but not both.
    Ex: (A ^ B) is 1.

        
    ~ (Bitwise Not)
    It is a unary operator and operates by reversing all the bits in the operand.
    Ex: (~B) is -4.


    << (Left Shift)
    It moves all the bits in its first operand to the left by the number of places specified in the second operand. New bits are filled with zeros. Shifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on.
    Ex: (A << 1) is 4.

        
    >> (Right Shift)
    Binary Right Shift Operator. The left operandâ€™s value is moved right by the number of bits specified by the right operand.
    Ex: (A >> 1) is 1.


    >>> (Right shift with Zero)
    This operator is just like the >> operator, except that the bits shifted in on the left are always zero.
    Ex: (A >>> 1) is 1.